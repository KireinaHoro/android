--- gdb/tui/tui-io.c.orig	2008-08-11 16:26:36 +0200
+++ gdb/tui/tui-io.c	2008-08-12 08:24:03 +0200
@@ -379,7 +379,6 @@
 static int
 get_y_or_n (void)
 {
-  extern int _rl_abort_internal ();
   int c;
 
   for (;;)
@@ -390,11 +389,29 @@
       if (c == 'n' || c == 'N' || c == RUBOUT)
 	return (0);
       if (c == ABORT_CHAR)
-	_rl_abort_internal ();
+	rl_abort (0, 0);
       beep ();
     }
 }
 
+/* Stupid comparison routine for qsort () ing strings. */
+static int
+_qsort_string_compare (s1, s2)
+  char **s1, **s2;
+{
+#if defined (HAVE_STRCOLL)
+  return (strcoll (*s1, *s2));
+#else
+  int result;
+
+  result = **s1 - **s2;
+  if (result == 0)
+    result = strcmp (*s1, *s2);
+
+  return result;
+#endif
+}
+
 /* A convenience function for displaying a list of strings in
    columnar format on readline's output stream.  MATCHES is the list
    of strings, in argv format, LEN is the number of strings in MATCHES,
@@ -406,9 +423,8 @@
 tui_rl_display_match_list (char **matches, int len, int max)
 {
   typedef int QSFUNC (const void *, const void *);
-  extern int _rl_qsort_string_compare (const void *, 
+  extern int _qsort_string_compare (const void *, 
 				       const void *);
-  extern int _rl_print_completions_horizontally;
   
   int count, limit, printed_len;
   int i, j, k, l;
@@ -453,11 +469,11 @@
   /* Sort the items if they are not already sorted.  */
   if (rl_ignore_completion_duplicates == 0)
     qsort (matches + 1, len, sizeof (char *),
-           (QSFUNC *)_rl_qsort_string_compare);
+           (QSFUNC *)_qsort_string_compare);
 
   tui_putc ('\n');
 
-  if (_rl_print_completions_horizontally == 0)
+  if (strcmp(rl_variable_value("print-completions-horizontally"), "off"))
     {
       /* Print the sorted items, up-and-down alphabetically, like ls.  */
       for (i = 1; i <= count; i++)
